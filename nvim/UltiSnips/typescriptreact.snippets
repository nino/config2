snippet afb "Arrow function with block" 'w'
(${1:args}) => {
	${2:body}
}
endsnippet

snippet dsc "Describe block"
describe('${1:title}', () => {
	${2:// TODO add unit tests}
})
endsnippet

snippet it "it block in core"
it("${1:text}", function() {
  $2
});
endsnippet

snippet o "Multiline object"
{
	${1}
}
endsnippet

snippet a "Multiline array" 'w'
[
	${1}
]
endsnippet

snippet c "constant"
const 
endsnippet

snippet cc "const var = "
const ${1} = 
endsnippet

# snippet e "expectation"
# expect(${1:false})
# endsnippet

# snippet tbp "Test file boilerplate"
# /* @flow */
# /* eslint-env jest */
# /* eslint-disable no-unused-expressions */
# import { expect } from 'chai'
# endsnippet

# snippet nx "Next generator"
# next = generator.next()
# endsnippet

# snippet tp "to have property"
# .to.have.property(${1})
# endsnippet

# snippet dp "to have deep property"
# .to.have.deep.property(${1})
# endsnippet

# snippet flow "flow header"
# /* @flow */
# endsnippet

# snippet redu "Reducer boilerplate"
# import { Record } from 'immutable'
# import type { Action } from '../store'

# export const ${1:StateType} = Record({
# 	${2:attrs}
# })
# const initialState = new $1()

# export default function reducer (
# 	state: $1 = initialState,
# 	action: Action
# ): $1 {
# 	if (!action) {
# 		return state
# 	}

	# switch (action.type) {
	# default:
	# 	return state
	# }
# }
# endsnippet

snippet acto "Redux action generator"
export type ${3:DefaultActionType} = {
	type: '$2/$1'
}
export function ${3/\w+/\l$0/} (): $3 {
	return {
		type: '${2:Namespace}/${1:DEFAULT_ACTION}'
	}
}
endsnippet

snippet /** "Doc comment"
/**
 * ${1}
 */
endsnippet

snippet eg "Ember get" 'w'
Ember.get(this, '${1}')
endsnippet

snippet ceg "Const ember get"
const $1 = Ember.get(this, '$1')
endsnippet

snippet es "Ember set"
Ember.set(this, '${1}')
endsnippet

snippet etest "Ember test"
test('${1}', async function(assert) {
  ${2}
});
endsnippet

snippet vtest "Ember test"
test('VISUAL | ${1}', async function(assert) {
  ${2}
  await capture(assert, '...');
});
endsnippet

snippet asf "async function" 'w'
async function(${1}) {
  $2
}
endsnippet

snippet iffun "if function"
if (typeof(${1}) === 'function') {
}
endsnippet

snippet niffun "assert function"
if (typeof(${1}) !== 'function') {
  throw new TypeError('${2} must be a function');
}
endsnippet

snippet yc "allow console"
console.log(${1}); // eslint-disable-line no-console
endsnippet

snippet gcl "get ember closure"
this.$1_closure = get_required_function(this, 'on_${1}');
endsnippet

snippet ocl "optional ember closure"
this.$1_closure = get_optional_function(this, 'on_${1}');
endsnippet

snippet init "ember class init"
init(...args) {
  this._super(...args);
  $1
},
endsnippet

snippet drat "ember didreceiveattrs"
didReceiveAttrs(...args) {
  this._super(...args);
  $1
},
endsnippet

snippet imem "import ember"
import Ember from 'ember';
endsnippet

snippet run "Runloop"
run(() => $1);
endsnippet

snippet log
console.log($1);
endsnippet

snippet if
if ($1) {
  $2
}
endsnippet

snippet cf
store.createFragment('$1', {$2})
endsnippet

snippet div
<div$1>$2</div>
endsnippet

snippet <>
<$1>$2</$1>
endsnippet

snippet r
Record<string, unknown>
endsnippet

snippet imc
import { $1 } from "components/$1";
endsnippet

snippet imh
import { $1 } from "hooks/$1";
endsnippet

snippet imm
import { $1 } from "models/$1";
endsnippet

snippet imu
import { $1 } from "utils/$1";
endsnippet

